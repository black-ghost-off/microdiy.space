<!-- +++
title = 'Interface_convert_part1'
date = 2024-05-22T15:52:11+03:00
draft = true
+++ -->

# Проект: Інтерфейс конвертор
## ДИСКЛЕЙМЕР
Код, прошивка, та схема не для розголошення, цей проект мій особистий, та все що тут буде написано більше як щоденик Embedded інженера
## Що Це?
Захотілось мені стовирити PET проєкт, конвертор Ethernet, USB, UART -> UART
Суть проекту в тому що в нас є пристрій який може контролювати Flow UART данних, змінювати та напраправляти куди нам потрібно, наприклад прийшли дані по Ethernet ми їх відправили в UART, прийшли по USB, запихнули в UART, прийшли по UART пішли в UART
Але навіщо?
## Навіщо?
Якщо з конвертом Ethernet -> UART і USB -> UART зрозуміло то навіщо нам потрібно UART -> UART?
Справа в тому що є такі протоколи як IBUS, SBUS, DSM/DSMX, CRSF, FPort, MSF, MAVlink і так далі.
Так от. UART -> UART це по факту конвертор протоколів які я написав зверху.
Тобто приходить нам SBUS наприклад з пульта RadioMaster TX12, ми конвертуємо цей сигнал в IBUS для flysky(умовно).

Ще з яким має завданням працювати цей пристрій, так це розмножувати вхідний сигнал з одного UART/USB/Ethernet на декілька UART, відповідно зі зміною протоколу
#### Навіщо?
> Паралельно посилати по декільком модулям управління UAV, дронам і так далі і на іншій стороні збирати з декількох приймачів сигнал в один.

## HardWare
### Мікроконтроллер
Вибір МК для є досить складним, адже мої побажання до нього наступні
Наявність Ethernet
Наявність 5+ UART портів
Наявність USB CDC 2-3 штуки хочаб
Опціонально FDCAN 2 штуки

Тому вибір падає на невелику кількість МК
По порядку
#### ESP32 
Відпадає відразу по низьці причин
А) Це є Китай від якого я хочу відмовитися і взагалі залежність від Китаю потрібно зменшувати.
Б) В нього всього лише 3 UART.

#### NXP
Зоопарк різних МК і один з представників вже лежить в мене на столі для експерементів, а саме NXP iMXRT1062, у вигляді Teensy 4.0
З плюсів, це те що потужний камінь, достатьно UART(8 ШТУК), наявність FDCAN, ETHERNET, USB CDC(3 штуки), наявність SD card
З мінусів, це те що до нього не підключиш Jlink і не віддебажиш нормально камінь і велика досить ціна 1898 гривень (22.05.24).

#### STM32
Більш зрозумілий зоопарк МК і теж один представник вже лежить в мене на столі, це STM32H563ZIxx, у вигляді NUCLEO плати
З плюсів цей МК має все те саме що і представник від NXP, але має меншу ціну, наявність на отладочній платі ST-LinkV3 для дебага.
Мінусів поки немає

#### інші
Інших я не шукав, а навіщо?)

## SoftWare 
Писати під NXP і під STM на їх рідних IDE/SDK в мене немає бажання(канешно класно писати в резюме зоопарк мікроконтролерів з якими ти працював, але коли їх тумач, то виникають питання). Тому мій вибір падає на ZephyrOS
> Zephyr ( / ˈ z ɛ f ə r / ) — це невелика операційна система реального часу (RTOS) для підключених пристроїв з обмеженими ресурсами та вбудованих пристроїв (з наголосом на мікроконтролерах ), що підтримують декілька архітектур і випущені за ліцензією Apache. 2.0. Zephyr містить ядро ​​та всі компоненти та бібліотеки, драйвери пристроїв, стеки протоколів, файлові системи та OTA, необхідні для розробки програмного забезпечення.

Простими словами, From the box ми маємо ОСь яка має кучу драйверів для роботи з різною переферією, пристроями, та стеками. Перенести прогу яка юзає BLE стек з умовного NRF52840 на ESP32, або на STM32WL не складе великих клопотів. 
Мати два різних МК з однаковими датчиками підключеними по одному протоколу? Запросто. Зефір зможе запустити один і той самий код на різних мк, з їх різними HAL всередині. Для цього в Zephyr реалізовано багато рівневі драйвера, як в Linux. 

Наприклад код для BME280 юзає драйвер I2C High level(read, write, etc...), потім цей драйвер відповідно до Target борди бере драйвер I2C драйвер, наприклад STM32 I2C (HAL_I2C_Master_Transmit, HAL_I2C_Master_Receive) і вже за за рахунок абстракції, над абстракцією в нас є зручний інтерфейс роботи з тим, чи іншим пристроєм.

Набір стеків протоколів ( IPv4 та IPv6 , протокол обмежених додатків (CoAP), LwM2M , MQTT , 802.15.4 , Thread , Bluetooth Low Energy , CAN )
Інтерфейс віртуальної файлової системи з кількома флеш-файловими системами для енергонезалежного зберігання ( FatFs , LittleFS, NVS)

Спрощують роботу в сотні і тисячі разів, нам не потрібно думати як реалізувати збереження в FLASH якоїсь інформації(налаштування наприклад), реалізація в залежності від потреб NVS, LittleFS зробить це за нас. 
Для STM32 це треба писати драйвер самому, який буде стирати сторінку, та записувати туди нову інформацію, налаштовувати лінкер, щоб він випадково туди прошивку не записав, відповідно до того як часто ми будемо записувати туди інформацію зробити захист щоб перезаписи нам не вбили флеш(в STM32 гарантовано 10_000 записів в флеш дозволено, далі як себе буде вести МК, не відомо). Тут за нас вже все робить розумний драйвер.

Це має сенс.

Наприклад під NRF zephyr це є база, рекомендована ОСь і SDK від розробників каменів.

> фан факт, розробка ведеться під? linux fondation, тому багато ніштяків які притаманні Linux, є в zephyr(наприклад Device Tree)
